#!/usr/bin/env python2
#

import os
import sys
import argparse
import re
import fnmatch
import pandas
import sqlite3


class SqliteReader:
    def read_frame(self, fn):
        conn = sqlite3.connect(fn)
        return pandas.io.sql.read_sql("SELECT * FROM result", conn)


def make_equal_match_func(value):
    if isinstance(value, list):
        return lambda x: str(x) in value
    else:
        return lambda x: x == type(x)(value)


def make_glob_match_func(value):
    if isinstance(value, list):
        def match(x):
            for v in value:
                if fnmatch.fnmatch(str(x), v):
                    return True
            return False
        return match
    else:
        return lambda x: fnmatch.fnmatch(str(x), value)


class Matcher:
    def __init__(self, spec):
        '''Create pandas DataFrame filter from spec

        'spec' is a list of matchers, each matcher defines a rule for a single
        column match. Currently supported matchers are:
        1. name=value: dataframe[name] == value
        2. name=[value,value,...]: dataframe[name].isin([value, value, ...])
        3. name~value: fnmatch.fnmatch(dataframe[name], value)
        4. name~[value,value,...]: fnmatch any value
        '''
        compiled_matcher = []
        for item in spec:
            m = re.match(r'^(\w+)([=~])(.*)$', item)
            assert m is not None
            name, op, value = m.groups()
            if re.match(r'\[.+\]', value):
                value = [x.strip() for x in value[1:-1].split(",")]
            else:
                value = value.strip()
            if op == "~":
                matcher = make_glob_match_func(value)
            else:
                matcher = make_equal_match_func(value)
            compiled_matcher.append((name, matcher))
        self.compiled_matcher = compiled_matcher

    def filter(self, frame):
        df = frame
        for name, matcher in self.compiled_matcher:
            df = df[df[name].map(matcher)]
        return df


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("data_file",
                        help="Data file generated by Collector")
    parser.add_argument("-f", "--field", action='append', default=[],
                        help="Field to display, support simple arithmetic")
    parser.add_argument("-m", "--match", action='append', default=[],
                        help="Data record matcher, support shell wildcards")
    parser.add_argument("-p", "--pivot",
                        help="Pivoting field (see pandas ref for details)")

    args = parser.parse_args()
    data = SqliteReader().read_frame(args.data_file)
    matcher = Matcher(args.match)
    df = matcher.filter(data)
    if args.field:
        v = df[args.field]
        if args.pivot:
            fields = [x.strip() for x in args.pivot[1:-1].split(",")]
            v = v.pivot(*fields)
        print v.to_string()
    else:
        print df.to_string(index=False)


if __name__ == "__main__":
    main()
